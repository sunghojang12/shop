package com.vam.controller;


import java.util.Random;

import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.vam.model.MemberVO;
import com.vam.service.MemberService;

@Controller
@RequestMapping(value = "/member")
public class MemberController {

	private static final Logger logger = LoggerFactory.getLogger(MemberController.class);

	@Autowired
	private MemberService memberservice;
	
	@Autowired
	private JavaMailSender mailSender;
	
	  @Autowired
	    private BCryptPasswordEncoder pwEncoder;

	// 회원가입 페이지 이동
	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public void loginGET() {

		logger.info("회원가입 페이지 진입");

	}

	// 회원가입
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public String joinPOST(MemberVO member) throws Exception {

		
	      String rawPw = "";            // 인코딩 전 비밀번호
	      String encodePw = "";        // 인코딩 후 비밀번호
	        
	        rawPw = member.getMemberPw();            // 비밀번호 데이터 얻음
	        encodePw = pwEncoder.encode(rawPw);        // 비밀번호 인코딩
	        member.setMemberPw(encodePw);            // 인코딩된 비밀번호 member객체에 다시 저장
	        
	        /* 회원가입 쿼리 실행 */
	        memberservice.memberJoin(member);
		
		return "redirect:/main";

	}
	// 로그인 페이지 이동

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public void JoinGET() {

		logger.info("로그인 페이지 진입");
	}
	
	
	
	// 아이디 중복 검사
		@RequestMapping(value = "/memberIdChk", method = RequestMethod.POST)
		@ResponseBody
		public String memberIdChkPOST(String memberId) throws Exception{
			
			//logger.info("memberIdChk() 진입");
			
			logger.info("memberIdChk() 진입");
			
			int result = memberservice.idCheck(memberId);
			
			logger.info("결과값 = " + result);
			
			if(result != 0) {
				
				return "fail";	// 중복 아이디가 존재
				
			} else {
				
				return "success";	// 중복 아이디 x
				
			}	
			
		} // memberIdChkPOST() 종료	
		
		 /* 이메일 인증 */
	    @RequestMapping(value="/mailCheck", method=RequestMethod.GET)
	    @ResponseBody
	    public String mailCheckGET(String email) throws Exception{
	        
	        /* 뷰(View)로부터 넘어온 데이터 확인 */
	        logger.info("이메일 데이터 전송 확인");
	        logger.info("인증번호 : " + email);
	        
	        /*인증번호( 난수) 생성*/
	        Random random = new Random();
	        int checkNum = random.nextInt(888888) + 111111 ;
	        logger.info("인증번호 " + checkNum);
	        
	        /*이메일 보내기*/
	        String setFrom = "jangddang91@naver.com";
	        String toMail = email;
	        String title = "회원가입 인증 이메일입니다.";
	        String content = 
	        		"홈페이지를 방문해주셔셔 감사합니다." +
	        		"<br><br>" +
	        		"인증 번호는" + checkNum + "입니다." +
	        		"<br>" +
	        		"해당 인증번호를 인증번호 확인란에 가입하여 주세요.";
	        
	        try {
	        	
	        	MimeMessage message = mailSender.createMimeMessage();
	        	MimeMessageHelper helper = new MimeMessageHelper(message, true, "utf-8");
	        	helper.setFrom(setFrom);
	        	helper.setTo(toMail);
	        	helper.setSubject(title);
	        	helper.setText(content,true);
	        	mailSender.send(message);
	        }catch(Exception e) {
	        	e.printStackTrace();
	        }
	        
	        String num = Integer.toString(checkNum);
	        
	        return num;
	    }
	    
	    /* 로그인 */
	    
	    @Controller
	    public class KakaoController {

	    @RequestMapping(value = "/login/getKakaoAuthUrl")
	    	public @ResponseBody String getKakaoAuthUrl(
	    			HttpServletRequest request) throws Exception {
	    		String reqUrl = 
	    				"https://kauth.kakao.com/oauth/authorize"
	    				+ "?client_id=f8071907fae4877f2a0f469e969f639f"
	    				+ "&redirect_uri=http://localhost:8181/login/oauth_kakao"
	    				+ "&response_type=code";
	    		
	    		return reqUrl;
	    	}
	    	
	    	// 카카오 연동정보 조회
	    	@RequestMapping(value = "/login/oauth_kakao")
	    	public String oauthKakao(
	    			@RequestParam(value = "code", required = false) String code
	    			, Model model) throws Exception {

	    		System.out.println("#########" + code);
	            String access_Token = getAccessToken(code);
	            System.out.println("###access_Token#### : " + access_Token);
	            
	            
	            HashMap<String, Object> userInfo = getUserInfo(access_Token);
	            System.out.println("###access_Token#### : " + access_Token);
	            System.out.println("###userInfo#### : " + userInfo.get("email"));
	            System.out.println("###nickname#### : " + userInfo.get("nickname"));
	           
	            JSONObject kakaoInfo =  new JSONObject(userInfo);
	            model.addAttribute("kakaoInfo", kakaoInfo);
	            
	            return "/home"; //본인 원하는 경로 설정
	    	}
	    	
	        //토큰발급
	    	public String getAccessToken (String authorize_code) {
	            String access_Token = "";
	            String refresh_Token = "";
	            String reqURL = "https://kauth.kakao.com/oauth/token";

	            try {
	                URL url = new URL(reqURL);

	                HttpURLConnection conn = (HttpURLConnection) url.openConnection();

	                //  URL연결은 입출력에 사용 될 수 있고, POST 혹은 PUT 요청을 하려면 setDoOutput을 true로 설정해야함.
	                conn.setRequestMethod("POST");
	                conn.setDoOutput(true);

	                //	POST 요청에 필요로 요구하는 파라미터 스트림을 통해 전송
	                BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
	                StringBuilder sb = new StringBuilder();
	                sb.append("grant_type=authorization_code");
	                sb.append("&client_id=f8071907fae4877f2a0f469e969f639f");  //본인이 발급받은 key
	                sb.append("&redirect_uri=http://localhost:8181/login/oauth_kakao");     // 본인이 설정해 놓은 경로
	                sb.append("&code=" + authorize_code);
	                bw.write(sb.toString());
	                bw.flush();

	                //    결과 코드가 200이라면 성공
	                int responseCode = conn.getResponseCode();
	                System.out.println("responseCode : " + responseCode);

	                //    요청을 통해 얻은 JSON타입의 Response 메세지 읽어오기
	                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
	                String line = "";
	                String result = "";

	                while ((line = br.readLine()) != null) {
	                    result += line;
	                }
	                System.out.println("response body : " + result);

	                //    Gson 라이브러리에 포함된 클래스로 JSON파싱 객체 생성
	                JsonParser parser = new JsonParser();
	                JsonElement element = parser.parse(result);

	                access_Token = element.getAsJsonObject().get("access_token").getAsString();
	                refresh_Token = element.getAsJsonObject().get("refresh_token").getAsString();

	                System.out.println("access_token : " + access_Token);
	                System.out.println("refresh_token : " + refresh_Token);

	                br.close();
	                bw.close();
	            } catch (IOException e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }

	            return access_Token;
	        }
	    	
	        //유저정보조회
	        public HashMap<String, Object> getUserInfo (String access_Token) {

	            //    요청하는 클라이언트마다 가진 정보가 다를 수 있기에 HashMap타입으로 선언
	            HashMap<String, Object> userInfo = new HashMap<String, Object>();
	            String reqURL = "https://kapi.kakao.com/v2/user/me";
	            try {
	                URL url = new URL(reqURL);
	                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
	                conn.setRequestMethod("GET");

	                //    요청에 필요한 Header에 포함될 내용
	                conn.setRequestProperty("Authorization", "Bearer " + access_Token);

	                int responseCode = conn.getResponseCode();
	                System.out.println("responseCode : " + responseCode);

	                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));

	                String line = "";
	                String result = "";

	                while ((line = br.readLine()) != null) {
	                    result += line;
	                }
	                System.out.println("response body : " + result);

	                JsonParser parser = new JsonParser();
	                JsonElement element = parser.parse(result);

	                JsonObject properties = element.getAsJsonObject().get("properties").getAsJsonObject();
	                JsonObject kakao_account = element.getAsJsonObject().get("kakao_account").getAsJsonObject();

	                String nickname = properties.getAsJsonObject().get("nickname").getAsString();
	                String email = kakao_account.getAsJsonObject().get("email").getAsString();
	                
	                userInfo.put("accessToken", access_Token);
	                userInfo.put("nickname", nickname);
	                userInfo.put("email", email);

	            } catch (IOEexception e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }

	            return userInfo;
	        }
	     }
	    
	    /* 로그인 */
		@RequestMapping(value="login.do", method=RequestMethod.POST)
		public String loginPOST(HttpServletRequest request, MemberVO member, RedirectAttributes rttr) throws Exception{
			
			HttpSession session = request.getSession();
			String rawPw = "";
			String encodePw = "";
		
			MemberVO lvo = memberservice.memberLogin(member);	// 제출한아이디와 일치하는 아이디 있는지 
			
			if(lvo != null) {			// 일치하는 아이디 존재시
				
				rawPw = member.getMemberPw();		// 사용자가 제출한 비밀번호
				encodePw = lvo.getMemberPw();		// 데이터베이스에 저장한 인코딩된 비밀번호
				
				if(true == pwEncoder.matches(rawPw, encodePw)) {		// 비밀번호 일치여부 판단
					
					lvo.setMemberPw("");					// 인코딩된 비밀번호 정보 지움
					session.setAttribute("member", lvo); 	// session에 사용자의 정보 저장
					return "redirect:/main";		// 메인페이지 이동
					
					
				} else {

					rttr.addFlashAttribute("result", 0);			
					return "redirect:/member/login";	// 로그인 페이지로 이동
					
				}
				
			} else {					// 일치하는 아이디가 존재하지 않을 시 (로그인 실패)
				
				rttr.addFlashAttribute("result", 0);			
				return "redirect:/member/login";	// 로그인 페이지로 이동
				
			}
			
		}
	    /*메인페이지 로그아웃*/
	   @RequestMapping(value="logout.do", method=RequestMethod.GET)
	   public String logoutMaintGET(HttpServletRequest request)throws Exception{
		   
		   logger.info("logoutMainGET메서도 진입");
		   
		   HttpSession session = request.getSession();
		   
		   session.invalidate();
		   
		   return "redirect:/main";
	   }
	 
	   /* 비동기방식 로그아웃 메서드 */
	   @RequestMapping(value="logout.do", method=RequestMethod.POST)
	   @ResponseBody
	   public void logoutPOST(HttpServletRequest request) throws Exception{
		   
		   logger.info("비동기 로그아웃 메서드 진입");
		   
		   HttpSession session = request.getSession();
		   
		   session.invalidate();
	   }
		

}
